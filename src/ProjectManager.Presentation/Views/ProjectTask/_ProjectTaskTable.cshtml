@using ProjectManager.Application.DataTransferObjects.ProjectTask;
@model ProjectTaskList

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.8.1/font/bootstrap-icons.min.css" rel="stylesheet">

<div class="text">
    <button type="button" class="btn btn-danger" onclick="openModal({url: '/ProjectTask/AddTask',data: @Model.ProjectId})" data-bs-toggle="modal" data-bs-target="#addTaskModal">+</button>
</div>

<table id="TasksTable2" class="table-borderless row-border border-light" width="100%" cellspacing="0">
    <thead style="background-color: #2f3248; color: #ffffff" class="table-light">
        <tr>
            <th>Id</th>
            <th>Created</th>
            <th>Name</th>
            <th>Assigned To</th>
            <th>Type</th>
            <th>State</th>
            <th>Priority</th>
        </tr>
    </thead>
</table>

<script>
    $(document).ready(function () {
        initializeTaskDataTable();
    });

    function initializeTaskDataTable() {

        var table = $('#TasksTable2').DataTable({
            select: 'single',
            "serverSide": true,
            "dom": "<'row'<'col-sm-6'l><'col-sm-6'f>>" +
                "<'row'<'col-sm-12'tr>>" +
                "<'row'<'col-sm-5'i><'col-sm-7'p>>",
            "sProcessing": false,
            "pageLength": 15,
            "order": [[1, 'desc']],
            ajax: {
                "url": "/ProjectTask/TasksTable",
                "type": "POST",
                "dataType": "json",
                "data": { projectId: @Model.ProjectId },
            },
            "buttons": [
                {
                    text: 'Add Task',
                    action: function (e, dt, node, config) {
                        alert('Add Task button clicked');
                    }
                },
                'copy', 'csv', 'excel', 'pdf', 'print'
            ],
            "columns": [
                { "data": "Id", "title": "Id", "name": "Id", "visible": true },
                { "data": "Created", "title": "Created", "name": "Created", "visible": false },
                { "data": "Name", "title": "Name", "name": "Name", "autoWidth": true },
                {
                    "data": "AssignedTo",
                    "title": "AssignedTo",
                    "name": "AssignedTo",
                    "render": function (data, type, full, meta) {
                        var avatar = '<img src="' + full.PhotoPath + '" class="avatar" style="border-radius: 50%;" width="25px">';
                        return avatar + ' ' + data;
                    },

                    "autoWidth": true
                },
                {
                    "data": "ProjectTaskType",
                    "title": "ProjectTaskType",
                    "name": "ProjectTaskType",
                    "autoWidth": true,
                    "render": function (data, type, full, meta) {
                        switch (data) {
                            case 'Bug':
                                return '<i class="bi bi-bug-fill" style="color: red; font-size: 15px;"></i> Bug';
                            case 'Feature':
                                return '<i class="bi bi-hand-thumbs-up-fill" style="color: green; font-size: 15px;"></i> Feature';
                            case 'Modify':
                                return '<i class="bi bi-pencil-fill" style="color: blue; font-size: 15px;"></i> Modify';
                            default:
                                return data;
                        }
                    }

                },
                {
                    "data": "ProjectTaskState",
                    "title": "ProjectTaskState",
                    "name": "ProjectTaskState",
                    "autoWidth": true,
                    "render": function (data, type, full, meta) {
                        switch (data) {
                            case 'Done':
                                return '<i class="bi bi-check-circle-fill" style="color: green; font-size: 15px;"></i> Done';
                            case 'Pending':
                                return '<i class="bi bi-clock-history" style="color: hsl(50, 100%, 30%); font-size: 15px;"></i> Pending';
                            case 'Rejected':
                                return '<i class="bi bi-x-circle-fill" style="color: red; font-size: 15px;"></i> Rejected';
                            case 'Confirmed':
                                return '<i class="bi bi-check-circle-fill" style="color: blue; font-size: 15px;"></i> Confirmed';
                            case 'In Progress':
                                return '<i class="bi bi-arrow-repeat" style="color: blue; font-size: 15px;"></i> In progress';
                            default:
                                return data;
                        }
                    }
                },
                {
                    "data": "Priority",
                    "title": "Priority",
                    "name": "Priority",
                    "autoWidth": true,
                    "render": function (data, type, full, meta) {
                        switch (data) {
                            case 'Low':
                                return '<div style="text-align: left;"><i class="bi bi-circle-fill" style="color: green; font-size: 15px;"></i> Low</div>';
                            case 'Medium':
                                return '<div style="text-align: left;"><i class="bi bi-circle-fill" style="color: orange; font-size: 15px;"></i> Medium</div>';
                            case 'High':
                                return '<div style="text-align: left;"><i class="bi bi-circle-fill" style="color: red; font-size: 15px;"></i> High</div>';
                            case 'Urgent':
                                return '<div style="text-align: left;"><i class="bi bi-circle-fill" style="color: darkred; font-size: 15px;"></i> Urgent</div>';
                            default:
                                return '<div style="text-align: left;">' + data + '</div>';
                        }
                    }
                } 
            ],
            "pagingType": "full_numbers",
            "language": {
                "search": '<i class="bi bi-search"></i>',
                "searchPlaceholder": "Search",
                "paginate": {
                    "first": "First",
                    "previous": "&laquo;",
                    "next": "&raquo;",
                    "last": "Last"
                },
            },
        });
       
        var contextmenu = $('#TasksTable2').contextMenu({
            selector: 'tr',
            trigger: 'right',
            callback: function (key, options) {
                let row = table.row(options.$trigger);
                switch (key) {
                    case 'Edit':
                        openModal({ data: row.data()["Id"], url: '../ProjectTask/UpdateTask/'});
                        break;
                    case 'Details':
                        var form = $('<form action="../ProjectTask/GotoProjectTaskDetails" method="get"></form>');
                        form.append('<input type="hidden" name="Id" value="' + row.data()["Id"] + '" />');
                        form.appendTo('body').submit().remove(); 
                        break;
                    case 'Delete':
                        openModal({ data: row.data()["Id"], url: '../ProjectTask/DeleteTask/' })
                        break;
                    default:
                        break
                }
            },

            items: {
                "Edit": { name: "Edit" },
                "Details": { name: "Details" },
                "Delete": { name: "Delete" }
            }
        });
        
        return table;
    }
   
    function drawPatrialView(url, divId) {
        $.ajax({
            url: url,
            cache: false,
            type: "GET",
            data: { id: @Model.ProjectId },
            success: function (result, e) {
                $('#' + divId).html(result);
                $('#lgModal').modal('show');
            },
        });
    }
</script>

<style>
    table#UserDatabase {
        font-size: 21px; 
    }

        table#UserDatabase th,
        table#UserDatabase td {
            padding: 12px;
            font-size: inherit;
        }

    #TasksTable2 tbody tr {
        background-color: transparent !important;
    }

    .custom-icon {
        stroke-width: 8px; 
    }

    .thicker-line {
        stroke-width: 8px;
    }

        .thicker-line::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            z-index: -1;
            stroke: darkgreen;
            stroke-width: 20px;
        }

    .highlighted-row {
        background-color: #f0f0f0; 
    }
</style>
