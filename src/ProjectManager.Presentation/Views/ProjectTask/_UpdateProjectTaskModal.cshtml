@using ProjectManager.Application.DataTransferObjects.ProjectTask
@model ProjectTaskById

<div class="modal-content">
    <div class="modal-header">
        <h5 class="modal-title" id="staticBackdropLabel">Update task</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
    </div>
    @using (Ajax.BeginForm("UpdateTask", "ProjectTask", new AjaxOptions
    {
        HttpMethod = "POST",
        OnSuccess = "reloadTaskData"
    }, new { enctype = "multipart/form-data", id = "taskForm"}))
    {
        <div class="modal-body">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.ProjectId)
            <div class="form-horizontal">

                <div class="form-group row mb-2 px-4">
                    <div class="col-6 col-md-4">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    </div>
                    <div class="col-12 col-md-8">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row mb-2 px-4">
                    <div class="col-6 col-md-4">
                        @Html.LabelFor(model => model.AssignedTo, "Assigned To", htmlAttributes: new { @class = "control-label col-form-label" })
                    </div>
                    <div class="col-12 col-md-8">
                        @Html.EditorFor(model => model.AssignedTo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.AssignedTo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row mb-2 px-4">
                    <div class="col-6 col-md-4">
                        @Html.LabelFor(model => model.TaskStateId, "State", htmlAttributes: new { @class = "control-label control-label col-md-2" })
                    </div>
                    <div class="col-12 col-md-8">
                        @Html.DropDownListFor(model => model.TaskStateId, (SelectList)ViewBag.TaskState, "Select state", new { @class = "form-select dropdown-toggle" })
                        @Html.ValidationMessageFor(model => model.TaskStateId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row mb-2 px-4">
                    <div class="col-6 col-md-4">
                        @Html.LabelFor(model => model.TaskTypeId, "Type", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-12 col-md-8">
                        @Html.DropDownListFor(model => model.TaskTypeId, (SelectList)ViewBag.TaskType, "Select type", new { @class = "form-select dropdown-toggle" })
                        @Html.ValidationMessageFor(model => model.TaskTypeId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row mb-2 px-4">
                    <div class="col-6 col-md-4">
                        @Html.LabelFor(model => model.PriorityId, "Priority", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-12 col-md-8">
                        @Html.DropDownListFor(model => model.PriorityId, (SelectList)ViewBag.Priorities, "Select Priority", new { @class = "form-select dropdown-toggle" })
                        @Html.ValidationMessageFor(model => model.PriorityId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row mb-2 px-4">
                    <div class="col-6 col-md-4">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-12 col-md-8">
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", style = "width: 100%; height: 100px;" })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group row mb-2 px-4">
                    <div class="col-6 col-md-4">
                        @Html.LabelFor(model => model.Files, "Upload images", htmlAttributes: new { @class = "control-label" })
                        @Html.ValidationMessageFor(model => model.Files, "", new { @class = "text-danger validation-message", data_valmsg_for = "Files" })
                    </div>
                    <div class="col-12 col-md-8">
                        <div class="container">
                            <label for="file-input" class="upload-label">
                                <i class="bi bi-upload upload-icon"></i><br>
                            </label>
                            <div id="file-size-error" class="text-danger" style="display: none;">
                                File size exceeds the limit of 5 MB.
                            </div>
                        </div>
                    </div>
                </div>

                <input type="file" id="file-input" name="Files" class="form-control"
                       accept="image/*" style="display:none;" onchange="preview()" multiple />

                <div style="max-height: 200px; overflow-y: auto">
                    <div id="images" class="image-container row">
                        @if (Model.PhotoPaths != null)
                        {
                            foreach (var photoPath in Model.PhotoPaths)
                            {
                                <div class="col-md-6">
                                    <div class="square-image-container">
                                        <img src="@Url.Content(photoPath)" class="img-fluid square-image" alt="Task Photo">
                                        <button type="button" class="delete-btn" onclick="deleteImage(this)">X</button>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div id="imageModal" class="modal">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-body">
                                <img id="modalImage" src="" alt="Modal Image">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-primary custom-primary" data-bs-dismiss="modal"><i class="bi bi-pencil"></i>  Modify</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        </div>
    }
</div>