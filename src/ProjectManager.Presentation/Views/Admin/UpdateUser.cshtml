@using ProjectManager.Application.DataTransferObjects.User
@model UserDto

@using (Html.BeginForm("UpdateUser", "Admin", FormMethod.Post, new { id = "editUserForm" }))
{
    <div class="modal-body">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(modal => Model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.UserName)
            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @autocomplete = "username" })
            @Html.ValidationMessageFor(model => model.UserName)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirstName, "First name")
            @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.FirstName)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LastName, "Last name")
            @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.LastName)
        </div>>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, "Email")
            @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Email)
        </div>>

        <div class="form-group">
            @Html.LabelFor(model => model.RoleId, "Roles")
            @Html.ListBoxFor(model => model.RoleId, new MultiSelectList(
                            (IEnumerable<SelectListItem>)ViewBag.Roles, "Value", "Text"), 
                            new { @class = "selectpicker form-control form-select", 
                            data_live_search = true, 
                            multiple = "multiple" })
            @Html.ValidationMessageFor(model => model.RoleId)  
        </div>>

        <div class="form-group">
            @Html.HiddenFor(model => model.IsEnabled, new { @id = "isEnabledField"})
            <div class="btn-group" role="group">
                <input type="radio"
                       class="btn-check"
                       name="btnradio"
                       id="btnradio1"
                       value="True"
                       autocomplete="off"
                       @(Model.IsEnabled ? "checked" : "") />>
                <label class="btn btn-outline-primary"
                       for="btnradio1">
                    Enabled
                </label>
                <input type="radio" 
                       class="btn-check" 
                       name="btnradio" 
                       id="btnradio2" 
                       value="False" 
                       autocomplete="off" 
                       @(Model.IsEnabled ? "" : "checked")>
                <label class="btn btn-outline-primary" 
                       for="btnradio2">
                    Disabled
                </label>
            </div>>
        </div>>
        <div>
            <input type="submit"
                   value="Save"
                   class="btn btn-primary me-auto">
            <button type="button"
                    class="btn btn-secondary"
                    id="closeModalBtn">
                Close
            </button>
        </div>>
    </div>
}

